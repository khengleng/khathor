syntax = "proto3";

package hathor;

// XXX: take this (from official docs) in consideration for future optimizations:
// > Note that field numbers in the range 1 through 15 take one byte to encode, including the field number and the
// > field's type (you can find out more about this in Protocol Buffer Encoding). Field numbers in the range 16 through
// > 2047 take two bytes. So you should reserve the numbers 1 through 15 for very frequently occurring message
// > elements. Remember to leave some room for frequently occurring elements that might be added in the future.

message BaseTransaction {
  oneof base_transaction {
    Transaction transaction = 1;
    Block block = 2;
    TokenCreationTransaction tokenCreationTransaction = 3;
  }
}

message Transaction {
  uint32 version = 1; // 2 byte in practice
  double weight = 2;
  uint32 timestamp = 3;
  repeated bytes parents = 4; // each parent is a hash (32 bytes)
  repeated bytes tokens = 5; // each token uid is a hash (32 bytes)
  repeated TxInput inputs = 6;
  repeated TxOutput outputs = 7;
  uint32 nonce = 8;
  // hash may be precomputed, should only be trusted if // it is sent by the storage
  bytes hash = 9;  // always of size 32 or empty
  Metadata metadata = 10;
}

message TokenCreationTransaction {
  uint32 version = 1; // 2 byte in practice
  double weight = 2;
  uint32 timestamp = 3;
  repeated bytes parents = 4; // each parent is a hash (32 bytes)
  repeated TxInput inputs = 5;
  repeated TxOutput outputs = 6;
  uint32 nonce = 7;
  bytes token_info = 8;
  // hash may be precomputed, should only be trusted if it is sent by the storage
  bytes hash = 9;  // always of size 32 or empty
  Metadata metadata = 10;
}

message Block {
  uint32 version = 1; // 2 byte in practice
  double weight = 2;
  uint32 timestamp = 3;
  repeated bytes parents = 4; // each parent is a hash (32 bytes)
  repeated TxOutput outputs = 5;
  oneof pow_oneof {
    bytes nonce = 6;
    BitcoinAuxPow aux_pow = 10;
  }
  // hash may be precomputed, should only be trusted if // it is sent by the storage
  bytes hash = 7; // always of size 32 or empty
  Metadata metadata = 8;
  bytes data = 9;
}

message BitcoinAuxPow {
  bytes header_head = 1;
  bytes coinbase_head = 2;
  bytes coinbase_tail = 3;
  repeated bytes merkle_path = 4;
  bytes header_tail = 5;
}

message TxInput {
  bytes tx_id = 1; // hash of
  uint32 index = 2; // 1 byte in practice
  bytes data = 3;
}

message TxOutput {
  uint64 value = 1;
  uint32 token_data = 2;
  bytes script = 3;
}

message Metadata {
  message Hashes {
    repeated bytes hashes = 1; // each hash always has 32 bytes
  }
  map<uint32, Hashes> spent_outputs = 1;
  Hashes conflicts_with = 2;
  Hashes voided_by = 3;
  Hashes twins = 7;
  repeated uint32 received_by = 4; // TODO: how is a node_id represented
  Hashes children = 5;
  double accumulated_weight = 6;
  double score = 8;
  bytes first_block = 9;
  uint64 height = 10;
  uint32 validation = 11;
  uint64 min_height = 12;
}
